"""
–ú–æ–¥—É–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.

–¶–µ–π –º–æ–¥—É–ª—å –º—ñ—Å—Ç–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è CRUD-–æ–ø–µ—Ä–∞—Ü—ñ–π –Ω–∞–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏:
—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, –ø–µ—Ä–µ–≥–ª—è–¥, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤, –∞ —Ç–∞–∫–æ–∂
–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è FastAPI, SQLAlchemy, Cloudinary –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
—Ç–∞ Redis (—á–µ—Ä–µ–∑ rate limiter) –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤.
"""
from fastapi import APIRouter, Depends, HTTPException, status, UploadFile, File, Request
from sqlalchemy.orm import Session
from typing import List
from app.crud import crud
from app.database.database import get_db
from app.models import models
from app.routes.auth import get_current_user
from app.rate_limit.rate_limit import limiter
from app.cloudinary_utils.cloudinary_utils import upload_avatar_file
from app.schemas import schemas

router = APIRouter(prefix="/contacts", tags=["contacts"])

@router.get("/health")
async def health_check():
    return {"status": "ok"}

@router.get("/ping")
def ping():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—É –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤.

    Returns:
        dict: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º —Ä–æ–±–æ—Ç–∏.
    """
    return {"message": "Contacts OK"}

@router.get("/", response_model=List[schemas.ContactOut])
def list_contacts(
    db: Session = Depends(get_db),
    current_user: models.User = Depends(get_current_user)
):
    """
    –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    Args:
        db (Session): –°–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
        current_user (models.User): –ü–æ—Ç–æ—á–Ω–∏–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á.

    Returns:
        List[schemas.ContactOut]: –°–ø–∏—Å–æ–∫ –æ–±‚Äô—î–∫—Ç—ñ–≤ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    return crud.get_contacts(db, current_user.id)


# ‚úÖ –Ñ–¥–∏–Ω–∏–π –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π POST-–µ–Ω–¥–ø–æ—ñ–Ω—Ç
@router.post("/", response_model=schemas.ContactOut, status_code=status.HTTP_201_CREATED)
@limiter.limit("5/minute")
def create_contact(
    request: Request,  # üîπ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è slowapi
    contact: schemas.ContactCreate,
    db: Session = Depends(get_db),
    current_user: models.User = Depends(get_current_user),
):
    """
    –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    Args:
        request (Request): –û–±‚Äô—î–∫—Ç –∑–∞–ø–∏—Ç—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ª—ñ–º—ñ—Ç—É –∑–∞–ø–∏—Ç—ñ–≤).
        contact (schemas.ContactCreate): –î–∞–Ω—ñ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É.
        db (Session): –°–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
        current_user (models.User): –ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á.

    Returns:
        schemas.ContactOut: –°—Ç–≤–æ—Ä–µ–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç.

    Raises:
        HTTPException: –Ø–∫—â–æ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤.
    """
    return crud.create_contact(db, contact, current_user.id)


@router.put("/{contact_id}", response_model=schemas.ContactOut)
def update_contact(
    contact_id: int,
    updates: schemas.ContactUpdate,
    db: Session = Depends(get_db),
    current_user: models.User = Depends(get_current_user),
):
    """
    –û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    Args:
        contact_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç—É.
        updates (schemas.ContactUpdate): –î–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
        db (Session): –°–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
        current_user (models.User): –ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á.

    Returns:
        schemas.ContactOut: –û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç.

    Raises:
        HTTPException: –Ø–∫—â–æ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.
    """
    contact = crud.get_contact(db, contact_id, current_user.id)
    if not contact:
        raise HTTPException(status_code=404, detail="Not found")
    return crud.update_contact(db, contact, updates)


@router.delete("/{contact_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_contact(
    contact_id: int,
    db: Session = Depends(get_db),
    current_user: models.User = Depends(get_current_user),
):
    """
    –í–∏–¥–∞–ª—è—î –∫–æ–Ω—Ç–∞–∫—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    Args:
        contact_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç—É.
        db (Session): –°–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
        current_user (models.User): –ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á.

    Returns:
        None: –Ø–∫—â–æ –∫–æ–Ω—Ç–∞–∫—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.

    Raises:
        HTTPException: –Ø–∫—â–æ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.
    """
    contact = crud.get_contact(db, contact_id, current_user.id)
    if not contact:
        raise HTTPException(status_code=404, detail="Not found")
    crud.delete_contact(db, contact)
    return None


@router.put("/{contact_id}/avatar", status_code=status.HTTP_200_OK)
def upload_avatar(
    contact_id: int,
    file: UploadFile = File(...),
    db: Session = Depends(get_db),
    current_user: models.User = Depends(get_current_user),
):
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∞–≤–∞—Ç–∞—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É Cloudinary
    —Ç–∞ –æ–Ω–æ–≤–ª—é—î URL –∞–≤–∞—Ç–∞—Ä—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.

    Args:
        file (UploadFile): –§–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫–∏–π –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è.
        db (Session): –°–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
        current_user (models.User): –ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á.

    Returns:
        dict: –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –∞–≤–∞—Ç–∞—Ä.
    """
    url = upload_avatar_file(file.file)
    crud.update_user_avatar(db, current_user, url)
    return {"avatar_url": url}
